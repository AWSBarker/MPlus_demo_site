# use poisson distribution hourly means# ref : https://timeseriesreasoning.com/contents/poisson-process/# probability of zero P(0) for hour x given λ = ,# validate using CI 99% Chi2 critical value"""Hour    P(0)    rw0       0.01    0.02122223"""# test hourly sampling of measures whole fleet for downtimeimport matplotlib.pyplot as pltimport pandas as pdimport numpy as npfrom scipy.stats import poisson, chi2import syssys.path.append("..")from sharepoint.Mapi2 import DBconxbeg ='2022.08.01'o = 'AL' #('OCH', 'AL', 'GMU', 'IN', 'ODE')with DBconx('t') as d:    tuptup = d.query(f"SELECT md.imei, md.checked_on, md.last_measure_at, md.count from `M+_daily` md "                     f"JOIN `M+_orgs` mo ON md.org = mo.id "                     f"WHERE md.last_measure_at BETWEEN '{beg}' AND curdate()"                     f"AND mo.showas = 'AL'" #{o}" #,2,6,10,100,101,102,103,105)"                     )df1 = pd.DataFrame([i for i in tuptup])df1.columns = ['imei', 'checked', 'hours', 'count']df1.astype({'imei': np.int64, 'count' : np.int16}) # no effect 'last' : '<M8[s]'})df1.set_index('hours', drop=False, inplace=True)#df1.fillna(0, inplace=True)# counts by hourc_by_h = df1.pivot_table(columns=df1.index.hour, index=df1.index.date, values='count', aggfunc=np.count_nonzero, fill_value=0)Ndays = c_by_h.count().mean()Tmeasures = c_by_h.sum().sum()# mean by hour λrw_vs_p = c_by_h.mean().to_frame(name='hourly_mean')# P(X=0) = λk * e–λ / k!rw_vs_p['Theory'] = rw_vs_p.apply(lambda x : poisson.pmf(0, x.hourly_mean), axis=1)# rw/h zeros / N    (df.sum(axis=1) == 0).count() >= self.zp     df.loc[(df[org] <= self.zp_value), self.org].count() >= self.zprw_vs_p['Actual'] = (c_by_h == 0).sum() / Ndays # for each hour how many zeros over daysfig, axs = plt.subplots(2,1, figsize=(8,6), sharex=True)b=rw_vs_p.plot(y=['Theory','Actual'], ax = axs[0],kind='bar',               ylabel='Probability zero measures',               title=f'For {o} \n Normal zero measure probability Actual vs Theory'               )a=rw_vs_p.plot(y='hourly_mean', ax=axs[1], kind='bar',               ylabel='Mean Measures/hour',               title=f'Hourly mean measures since {beg} total measures {Tmeasures}'               )#rw_vs_p.plot(y='Actual', ax = axs[1],kind='bar', color='b', ylabel='Observed rate', title=f'actual zero (incl outages) rates since {beg}, total measures {Tmeasures}')#b.title.set_size(10)plt.show()print('hi')"""# lower bound CI 99% (a=0.01) using chi2, degrees freedon = sample-1. lb = 0.5 * Chi2 2N a/2# lower = N * (1. - 1. / (9. * N) - 2. / (3. * np.sqrt(N))) ** 3.uci = N + 2. * np.sqrt(N + 1) + 4. / 3.lci = N * (1. - 1. / (9. * N) - 2. / (3. * np.sqrt(N))) ** 3"""