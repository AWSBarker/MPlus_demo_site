# test hourly sampling of measures whole fleet for downtimeimport matplotlib.pyplot as pltfrom mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axesfrom mpl_toolkits.axes_grid1.inset_locator import mark_insetimport pandas as pdimport numpy as npimport syssys.path.append("..")from sharepoint.Mapi2 import DBconxbeg ='2021.11.01'with DBconx('t') as d:    tuptup = d.query(f"SELECT imei, checked_on, last_measure_at, count from `M+_daily` "                     f"WHERE last_measure_at BETWEEN '{beg}' AND curdate()")df1 = pd.DataFrame([i for i in tuptup])df1.columns = ['imei', 'checked', 'last', 'count']df1.astype({'imei': np.int64, 'count' : np.int16}) # no effect 'last' : '<M8[s]'})df1.set_index('last', drop=False, inplace=True)df1.fillna(0, inplace=True)df2 = df1.pivot_table(columns=df1.index.hour, index=df1.index.date, values='count', aggfunc=np.count_nonzero, fill_value=0)# df3 = pd.DataFrame()# for i in range(0,24,2):#     df3[f'{i}-{i+1}'] = df2[df2.columns[i]]+df2[df2.columns[i+1]]#totalM = df2.sum().sum()totalByM = df2.iloc[:,0:24].sum()zeros = df2.apply( lambda s : s.value_counts().get(key=0,default=0), axis=0)pct0 = 100*zeros/totalByMfig, ax = plt.subplots(figsize=(12,15))whis = (1,99)ax.boxplot(df2, whis=whis, labels=df2.columns.to_list()) #,return_type="both")#axs[0,0].set(ylim=(-50,200))ax.set_title(f'Total of {totalM} measures, by hour since {beg} until today')ax.set_ylabel('Measures/hour with median, 25-75% and 1-99% confidence')ax.set_xlabel('hour of measure [zoom box = normal working hours] source is DEMO app')ax.annotate('99% all measures', xy=(8, 136), xytext=(9, 130), arrowprops=dict(facecolor='black', shrink=0.05),)#ax.annotate('.', xy=(17, 150), xytext=(17, 140), arrowprops=dict(facecolor='black', shrink=0.05),)#ax.text(11, 140, f'red dot implies chance of no measures during 1 hour around 10UTC is <0.5% ', wrap=True, ha="left", va="center", rotation=0, size=11)#    bbox=dict(boxstyle="round,pad=0.3", fc="none", ec="0.1", lw=1))#ax.annotate('~0.1%', xy=(11, 158), xytext=(11.5, 140), arrowprops=dict(facecolor='black', shrink=0.05),)ax.annotate('red dot implies chance of zero measures during 1 hour\n'            'around 10am is <0.1%. At 11am onwards there is ~0.6% \n'            'i.e. in normal working hours alert sent 7/year',    xy=(17, 150), xycoords='data',    xytext=(-20, -60), textcoords='offset points',    bbox=dict(boxstyle="round", fc="0.8"),    arrowprops=dict(arrowstyle="->",                    connectionstyle="angle,angleA=0,angleB=-90,rad=10"))for i in pct0.iteritems():    ax.text(i[0]+1, -5, f'{i[1]:.1f}', fontsize=8, horizontalalignment='center', color='red')ax.text(0, -5, "0 measures\nas % total --->", fontsize=8, horizontalalignment='right', color='red')ax2 = zoomed_inset_axes(ax, zoom=1.5, loc='upper right') # zoom = 2ax2.boxplot(df2, whis=whis, labels=df2.columns.to_list()) #,return_type="both")ax2.set_facecolor('0.8')ax2.set_xlim(7, 16)ax2.set_ylim(-2, 15)mark_inset(ax, ax2, loc1=2, loc2=4, fc="grey", ec="0.5", alpha=0.3)ax2.set_xlabel('normal open hours', loc='left')ax2.scatter(11,0,10,'red')ax2.annotate('1%', xy=(8, 3), xytext=(7.3, 9), arrowprops=dict(facecolor='black', shrink=0.1),)plt.show()"""axs[0,1].set_title('zoomed section - highlighting zero measures per hour')axs[0,1].set_xlabel('hour measured UTC')axs[0,1].boxplot(df3, whis=whis, labels=df3.columns.to_list()) #,return_type="both")#axs[0,0].set(ylim=(-50,200))axs[0,1].set_title(f'Bi-Hourly measures all Orgs since {beg} until today')axs[0,1].set_ylabel('measures per 2 hour (median, 25-75% and 1-99%')#axs[0,0].set_xlabel('hour measured UTC')#ax1 = zoomed_inset_axes(ax1, 1.75, loc='upper right') # zoom = 2data = df3.loc[:, '4-5':'16-17']axs[1,1].boxplot(data,  whis=whis, labels= data.columns.to_list())#plt.xticks(visible=False)#plt.yticks(visible=False)#mark_inset(axs[0,1], axs[1,1], loc1=3, loc2=4, fc="yellow", ec="0.7")#axs[1,1].set_title('zoomed section - highlighting zero measures per hour')#axs[1,1].set_xlabel('hour measured UTC')plt.show()"""