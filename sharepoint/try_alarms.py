#by country/client breadowns# test hourly sampling to produce alarms and status cockpitfrom bokeh.plotting import show, figure, Columnfrom bokeh.models import CDSView, ColumnDataSource, GroupFilter, FixedTicker, IndexFilter, LinearColorMapper, BasicTicker, ColorBar, HoverTool, DatetimeTickFormatter, PrintfTickFormatterfrom bokeh.transform import transformimport pandas as pdimport numpy as npimport sysfrom datetime import datetime as dt, timedeltasys.path.append("..")from sharepoint.Mapi2 import DBconxlookback = 90beg = dt.now() - timedelta(days=lookback)  # 1 week back 7 x 24 grid, top is todaynow = dt.now() # BEWARE SERVER TIME = utcwith DBconx('t') as d:    tuptup = d.query(f"SELECT md.last_measure_at, md.count, mo.showas from `M+_daily` md "                     f"JOIN `M+_orgs` mo ON md.org = mo.id "                     f"WHERE md.last_measure_at >= '{beg}' AND md.last_measure_at <= '{now}'"                     )df1 = pd.DataFrame([i for i in tuptup], columns=['last', 'count', 'org'])df1 = df1.astype({'count' : np.int16, 'org' : 'category'})df1.set_index('last', drop=True, inplace=True)last_measure = df1.index.max().strftime('%y-%m-%d %X')# --- cut here# cut here remember queryset used and dt.datetime----gb1 = df1.groupby('org').resample('H').count()df1 = df1.resample('H').count()df1.fillna(0, inplace=True)yrange = df1.index.datexrange = [0, 24] #dt(2022,10,16,0).hour,dt(2022,10,16,23).hour]df1['hour'] = df1.index.hourdf1['date'] = df1.index.date #.astype('category')dfgb = df1.groupby(['date', 'hour', 'org'])['count'].sum()#.reset_index()source = ColumnDataSource(dfgb)today_view = CDSView(source=source, filters=[IndexFilter(dfgb[dfgb.date==dt.now().date()].index.to_list())]) #dt.now().strftime('%Y-%m-%d'))])print(today_view.filters[0].indices)colors = ["red", "gold", "yellowgreen", "green"]mapper = LinearColorMapper(palette=colors, low=0, high=len(colors), nan_color='red')p0 = figure(title=f"Last measure @ {last_measure}", height= 120, width=840,           x_range=xrange,x_axis_label =None, x_axis_location ='above', #, x_axis_type='datetime'           y_axis_label =f'Today', y_axis_type='datetime',           tools="", toolbar_location=None           )p0.rect(y='date', x='hour', width=0.99, height=0.99, source=source, view=today_view,           fill_color=transform('count', mapper), line_color=None,       )p0.xaxis.ticker = FixedTicker(ticks=[0,2,4,6,8,10,12,14,16,18,20,22,24])p0.xaxis.formatter = PrintfTickFormatter(format="%02s:00")p0.xaxis.major_label_orientation = 0.6p0.yaxis.major_tick_line_color = Nonep0.yaxis.major_label_text_color = Nonehovertool= HoverTool(tooltips=[("date", "@date{%y-%m-%d}"), ("hour", "@hour"), ("measures", "@count"),], formatters={"@date" : 'datetime'})p0.add_tools(hovertool)p = figure(title=f"", width=840,           x_range=xrange, x_axis_label =None, x_axis_location = None,           y_axis_label =f'Last {lookback} days',y_axis_type='datetime',           tools="", toolbar_location=None,           )p.rect(y='date', x='hour', width=1, height=3600*24*1000, source=source,           fill_color=transform('count', mapper), line_color="darkgreen",       )p.yaxis.major_tick_line_color = Nonep.yaxis.major_label_text_color = Nonecolor_bar = ColorBar(color_mapper=mapper, major_label_text_font_size="10px",                     ticker=BasicTicker(desired_num_ticks=len(colors)),                     label_standoff=5, border_line_color=None,                     title='Zero measures (system down?)                              very low 1                          '                           '                low  2                                   normal > 3',                     height=10                     )p.add_layout(color_bar, 'below')hovertool1= HoverTool(tooltips=[("date", "@date{%y-%m-%d}"), ("hour", "@hour"), ("measures", "@count"),], formatters={"@date" : 'datetime'})p.add_tools(hovertool1)# cut here----layout = Column(p0,p)show(layout)