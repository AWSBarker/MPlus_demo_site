# ensure 15min gaps are retained as zeros# need zeros reported# add country/client breakdowns# test hourly sampling to produce alarms and status cockpitimport pandas as pdimport numpy as npimport sysfrom datetime import datetime as dt, timedeltasys.path.append("..")from sharepoint.Mapi2 import DBconxfrom matplotlib import pyplot as pltimport matplotlib as mplfrom matplotlib.colors import ListedColormap, LinearSegmentedColormaplookback = 120 # rounded down 15 mins 120 #minutes UTC vs CETnow = dt.utcnow() # BEWARE SERVER TIME = utcbeg = (now - (now - dt.min) % timedelta(minutes=15)) - timedelta(minutes=lookback)  # 1 week back 7 x 24 grid, top is todaylastmonth = beg - timedelta(days=30)with DBconx('t') as d:    tuptup = d.query(f"SELECT md.last_measure_at, md.count, mo.showas from `M+_daily` md "                     f"JOIN `M+_orgs` mo ON md.org = mo.id "                     f"WHERE md.last_measure_at >= '{lastmonth}' AND md.last_measure_at <= '{now}'"                     )dflm = pd.DataFrame([i for i in tuptup], columns=['last', 'count', 'org'])dflm = dflm.astype({'count' : np.int16, 'org' : 'category'})dflm.set_index('last', drop=True, inplace=True)dflm.sort_index(inplace=True) # avoid future error on index not existingst_cut =(dt.utcnow() - timedelta(minutes=35)).strftime('%Y-%m-%d %H:%M')en_cut = (dt.utcnow() - timedelta(minutes=10)).strftime('%Y-%m-%d %H:%M')# remove 15min chunkdflm = pd.concat([dflm[:st_cut],  dflm[en_cut:]])# get color map dict by orgorgs = dflm['org'].unique().to_list()cmap = mpl.colormaps['tab20'].resampled(len(orgs))cmap_dict =dict(zip(orgs,cmap.colors))df1 = dflm[beg.strftime('%Y-%m-%d %H:%M'):]# need to backfill any index gaps i.e. 26.11 @21:45 UTClast_ = df1.index.max().strftime('%H:%M')utcnow = dt.utcnow().strftime('%X')first_ = df1.index.min().strftime('%H:%M')# resample to get all 15m periodsa = df1.groupby('org').resample('15T')['count'].count().unstack(fill_value=0).Ta.index = a.index.time#a = df1.groupby([df1.index.floor('15T').strftime('%H:%M'), 'org'])['count'].count().unstack()#no_measures = a.loc[:, (a==0).all(axis=0)].columns.to_list() # capture zero orgsno_measures = ''#set(orgs).difference(set(a.columns.to_list()))a = a.loc[:, (a!=0).any(axis=0)] # remove the zero orgsb = dflm.groupby([dflm.index.floor('15T').strftime('%H:%M'), 'org'])['count'].count().unstack() / 30b = b[beg.strftime('%H:%M'):now.strftime('%H:%M')]b = b.loc[:, (b!=0).any(axis=0)] # remove the zero orgsfig, axs = plt.subplots(2,1, figsize=(8,7))fig.suptitle(f'M+hub ALERT : Measures by Org @ {utcnow} UTC')a.plot(ax=axs[0], kind='bar', stacked=True, fontsize=9, rot=0, width=0.9,             ylabel = 'Measures',             xlabel = '', #f'First {first_} UTC                                                                 Last {last_} UTC',             sort_columns = True,             color=cmap_dict,             )axs[0].set_xlim(-1, 8) # 2 hours of 15 min blocks = 8# plt.text(x=1, y=1, s=f"")axs[0].tick_params(bottom = False)axs[0].set_title(f'Measures since {first_}UTC per 15min period. \n No measures from {no_measures}', fontsize=10, loc='center')axs[0].set_xlabel(f'First {first_}                                          Periods UTC                                                Last {last_}', fontsize=9, loc='left')axs[0].set_xticklabels(axs[0].get_xticklabels(), fontdict = {'fontsize':8, 'horizontalalignment': 'right'})axs[0].legend(bbox_to_anchor=(1,1), loc="upper left", fontsize=6)axs[0].get_yaxis().set_major_formatter(int)b.plot(ax = axs[1], kind='bar', stacked=True, fontsize=8, rot=0, width=0.9,             ylabel = 'Measures',             xlabel ='Periods UTC ',             sort_columns = True,             color=cmap_dict,             )axs[1].set_title(f'Average measurements during last month', fontsize=10, loc='center')axs[1].set_xlim(-1, 8) # 2 hours of 15 min blocks = 8axs[1].set_xticklabels(axs[1].get_xticklabels(), fontdict = {'fontsize':8, 'horizontalalignment': 'right'})axs[1].tick_params(bottom = False)axs[1].legend(bbox_to_anchor=(1,1), loc="upper left", fontsize=6)#axs[1].get_legend().set_visible(False)fig.tight_layout(pad=5.0)fig.savefig('past2hours.png')"""df1 = df1.resample('H').count()df1.fillna(0, inplace=True)yrange = df1.index.datexrange = [0, 24] #dt(2022,10,16,0).hour,dt(2022,10,16,23).hour]df1['hour'] = df1.index.hourdf1['date'] = df1.index.date #.astype('category')dfgb = df1.groupby(['date', 'hour', 'org'])['count'].sum()#.reset_index()source = ColumnDataSource(dfgb)today_view = CDSView(source=source, filters=[IndexFilter(dfgb[dfgb.date==dt.now().date()].index.to_list())]) #dt.now().strftime('%Y-%m-%d'))])print(today_view.filters[0].indices)colors = ["red", "gold", "yellowgreen", "green"]mapper = LinearColorMapper(palette=colors, low=0, high=len(colors), nan_color='red')p0 = figure(title=f"Last measure @ {last_measure}", height= 120, width=840,           x_range=xrange,x_axis_label =None, x_axis_location ='above', #, x_axis_type='datetime'           y_axis_label =f'Today', y_axis_type='datetime',           tools="", toolbar_location=None           )p0.rect(y='date', x='hour', width=0.99, height=0.99, source=source, view=today_view,           fill_color=transform('count', mapper), line_color=None,       )p0.xaxis.ticker = FixedTicker(ticks=[0,2,4,6,8,10,12,14,16,18,20,22,24])p0.xaxis.formatter = PrintfTickFormatter(format="%02s:00")p0.xaxis.major_label_orientation = 0.6p0.yaxis.major_tick_line_color = Nonep0.yaxis.major_label_text_color = Nonehovertool= HoverTool(tooltips=[("date", "@date{%y-%m-%d}"), ("hour", "@hour"), ("measures", "@count"),], formatters={"@date" : 'datetime'})p0.add_tools(hovertool)p = figure(title=f"", width=840,           x_range=xrange, x_axis_label =None, x_axis_location = None,           y_axis_label =f'Last {lookback} days',y_axis_type='datetime',           tools="", toolbar_location=None,           )p.rect(y='date', x='hour', width=1, height=3600*24*1000, source=source,           fill_color=transform('count', mapper), line_color="darkgreen",       )p.yaxis.major_tick_line_color = Nonep.yaxis.major_label_text_color = Nonecolor_bar = ColorBar(color_mapper=mapper, major_label_text_font_size="10px",                     ticker=BasicTicker(desired_num_ticks=len(colors)),                     label_standoff=5, border_line_color=None,                     title='Zero measures (system down?)                              very low 1                          '                           '                low  2                                   normal > 3',                     height=10                     )p.add_layout(color_bar, 'below')hovertool1= HoverTool(tooltips=[("date", "@date{%y-%m-%d}"), ("hour", "@hour"), ("measures", "@count"),], formatters={"@date" : 'datetime'})p.add_tools(hovertool1)# cut here----layout = Column(p0,p)show(layout)"""