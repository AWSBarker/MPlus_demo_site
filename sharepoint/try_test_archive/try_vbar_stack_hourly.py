# test hourly sampling of measures whole fleet for downtimeimport pandas as pdimport numpy as npfrom Mapi2 import DBconx, Orgimport matplotlib.pyplot as plt#pyplot.switch_backend('agg')import holoviews as hvfrom holoviews import optshv.extension('bokeh', 'matplotlib')"""from  bokeh.sampledata.autompg import autompghv.extension('bokeh')violin = hv.Violin(autompg, ('yr', 'Year'), ('mpg', 'Miles per Gallon')).redim.range(mpg=(8, 45))violin.opts(height=500, width=900, violin_fill_color=dim('Year').str(), cmap='Set1')from bokeh.plotting import show, figure, ColumnDataSourcefrom bokeh.models import ColumnDataSource, HoverTool,  DatetimeTickFormatter, Legendfrom bokeh.palettes import linear_palette, Turbo256, diverging_palette, Plasma256from bokeh.transform import factor_cmap, transform"""with DBconx('t') as d:    tuptup = d.query(f"SELECT imei, checked_on, last_measure_at, count, org from `M+_daily` "                     f"WHERE last_measure_at > '2022.01.01' AND last_measure_at <= NOW()")    #tuptup = d.query("SELECT md.*, mo.name FROM `M+_daily` md JOIN `M+_orgs` mo ON md.org = mo.id")orgDict  = Org.getOrg_Name_dict()df1 = pd.DataFrame([i for i in tuptup])df1.columns = ['imei', 'checked', 'last', 'count', 'org']df1.astype({'imei': np.int64, 'count' : np.int16, 'org': np.int8}) # no effect 'last' : '<M8[s]'})df1.org = df1.org.map(orgDict) #.astype('category')df1.set_index('last', drop=False, inplace=True)df1.sort_index(inplace=True)df1.info()df1['hour'] = df1.index.hourdf2 = df1.pivot_table(columns=df1.index.hour, index=df1.index.date, values='count', aggfunc=np.count_nonzero)dfgb = df1.groupby(df1.hour).count()boxw = hv.BoxWhisker(df1, ('hour', 'hour'), ('count', 'count'))boxw.opts(width=860, backend='bokeh')hv.save(boxw, 'boxplot.html', backend='bokeh')boxwhv.save(boxw, 'boxplot.html')violin = hv.Violin(df1, ('hour', 'hour'), ('count', 'count'))violin.opts(inner='quartiles', cut=10, width=860, backend='bokeh')hv.save(violin, 'plot.html', backend='bokeh')"""hr = df1['count'].resample('H').count()hr1 = hr.groupby(hr.index.hour)source= ColumnDataSource(hr)p2 = figure(plot_width=680, plot_height=360, title=" hr",            outline_line_color=None, x_axis_type = 'datetime')#            toolbar_location=None) #, tools="", x_range=source_org_stack_wk.data['last'],p2.vbar(x='last', top='count', width=900*3600*0.9,  source=source ) #, view=view_org_stack_wk) #, source=source1show(p2)"""