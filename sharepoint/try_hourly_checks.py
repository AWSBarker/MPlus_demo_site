# check 0000 - 0300 blackhole by reindex# test hourly running sampling to produce alarms and status cockpit# global status plus key country / tz breakdownfrom bokeh.plotting import show, figure, Columnfrom bokeh.models import CDSView, ColumnDataSource, GroupFilter, FixedTicker, IndexFilter, LinearColorMapper, BasicTicker, ColorBar, HoverTool, DatetimeTickFormatter, PrintfTickFormatterfrom bokeh.transform import transformimport pandas as pdimport numpy as npimport sysfrom datetime import datetime as dt, timedeltaimport datetimesys.path.append("..")from sharepoint.Mapi2 import DBconxdef blackhole(df):    if datetime.time(0,0,0) <= now.time() <= datetime.time(3,0,0):        index24 = ['21:00', '21:15', '21:30', '21:45', '22:00', '22:15', '22:30',                   '22:45', '23:00', '23:15', '23:30', '23:45', '00:00', '00:15',                   '00:30', '00:45', '01:00', '01:15', '01:30', '01:45',           '02:00', '02:15', '02:30', '02:45', '03:00', '03:15', '03:30', '03:45',           '04:00', '04:15', '04:30', '04:45', '05:00', '05:15', '05:30', '05:45',           '06:00', '06:15', '06:30', '06:45', '07:00', '07:15', '07:30', '07:45',           '08:00', '08:15', '08:30', '08:45', '09:00', '09:15', '09:30', '09:45',           '10:00', '10:15', '10:30', '10:45', '11:00', '11:15', '11:30', '11:45',           '12:00', '12:15', '12:30', '12:45', '13:00', '13:15', '13:30', '13:45',           '14:00', '14:15', '14:30', '14:45', '15:00', '15:15', '15:30', '15:45',           '16:00', '16:15', '16:30', '16:45', '17:00', '17:15', '17:30', '17:45',           '18:00', '18:15', '18:30', '18:45', '19:00', '19:15', '19:30', '19:45',           '20:00', '20:15', '20:30', '20:45']        return df.reindex(index24)lookback = 2 # minutesbeg = dt(2022, 12, 12, 3,0) #dt.utcnow() - timedelta(days=lookback)  # 1 week back 7 x 24 grid, top is todaynow = dt(2022, 12, 14, 2,45,0) #dt.utcnow() # BEWARE SERVER TIME = utcwith DBconx('t') as d:    tuptup = d.query(f"SELECT md.last_measure_at, md.count, mo.showas from `M+_daily` md "                     f"JOIN `M+_orgs` mo ON md.org = mo.id "                     f"WHERE md.last_measure_at >= '{beg}' AND md.last_measure_at <= '{now}'")df1 = pd.DataFrame([i for i in tuptup])df1.columns = ['last', 'count', 'org']df1.astype({'count' : np.int16}) # no effect 'last' : '<M8[s]'})df1.set_index('last', drop=True, inplace=True)last_measure = df1.index.max().strftime('%y-%m-%d %X')# --- cut here# cut here remember queryset used and dt.datetime----df1 = df1.resample('min').count()df1.fillna(0, inplace=True)yrange = df1.index.datexrange = [0, 24] #dt(2022,10,16,0).hour,dt(2022,10,16,23).hour]df1['hour'] = df1.index.hourdf1['date'] = df1.index.date #.astype('category')dfgb = df1.groupby(['date', 'hour']).sum().reset_index()dfgb = blackhole(dfgb)source = ColumnDataSource(dfgb)today_view = CDSView(source=source, filters=[IndexFilter(dfgb[dfgb.date==dt.now().date()].index.to_list())]) #dt.now().strftime('%Y-%m-%d'))])print(today_view.filters[0].indices)colors = ["red", "gold", "yellowgreen", "green"]mapper = LinearColorMapper(palette=colors, low=0, high=len(colors), nan_color='red')p0 = figure(title=f"Last measure @ {last_measure}", height= 120, width=840,           x_range=xrange,x_axis_label =None, x_axis_location ='above', #, x_axis_type='datetime'           y_axis_label =f'Today', y_axis_type='datetime',           tools="", toolbar_location=None           )p0.rect(y='date', x='hour', width=0.99, height=0.99, source=source, view=today_view,           fill_color=transform('count', mapper), line_color=None,       )p0.xaxis.ticker = FixedTicker(ticks=[0,2,4,6,8,10,12,14,16,18,20,22,24])p0.xaxis.formatter = PrintfTickFormatter(format="%02s:00")p0.xaxis.major_label_orientation = 0.6p0.yaxis.major_tick_line_color = Nonep0.yaxis.major_label_text_color = Nonehovertool= HoverTool(tooltips=[("date", "@date{%y-%m-%d}"), ("hour", "@hour"), ("measures", "@count"),], formatters={"@date" : 'datetime'})p0.add_tools(hovertool)# cut here----layout = Column(p0)show(layout)"""p = figure(title=f"", width=840,           x_range=xrange, x_axis_label =None, x_axis_location = None,           y_axis_label =f'Last {lookback} days',y_axis_type='datetime',           tools="", toolbar_location=None,           )p.rect(y='date', x='hour', width=1, height=3600*24*1000, source=source,           fill_color=transform('count', mapper), line_color="darkgreen",       )p.yaxis.major_tick_line_color = Nonep.yaxis.major_label_text_color = Nonecolor_bar = ColorBar(color_mapper=mapper, major_label_text_font_size="10px",                     ticker=BasicTicker(desired_num_ticks=len(colors)),                     label_standoff=5, border_line_color=None,                     title='Zero measures (system down?)                              very low 1                          '                           '                low  2                                   normal > 3',                     height=10                     )p.add_layout(color_bar, 'below')hovertool1= HoverTool(tooltips=[("date", "@date{%y-%m-%d}"), ("hour", "@hour"), ("measures", "@count"),], formatters={"@date" : 'datetime'})p.add_tools(hovertool1)"""